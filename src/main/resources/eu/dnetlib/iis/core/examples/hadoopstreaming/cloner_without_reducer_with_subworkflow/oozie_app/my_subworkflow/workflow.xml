<workflow-app xmlns="uri:oozie:workflow:0.4" name="my_subworkflow">
    
    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
    <start to="generate-schema" />

	<action name="generate-schema">
	    <java>
	        <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
	        <arg>eu.dnetlib.iis.core.examples.schemas.documentandauthor.Person</arg>
	        <capture-output />
	    </java>
	    <ok to="python_cloner2" />
	    <error to="fail" />
	</action>
    
    <action name="python_cloner2">
        <map-reduce>
            <prepare>
                <delete path="${nameNode}${workingDir}/python_cloner2"/>
                <mkdir path="${nameNode}${workingDir}/python_cloner2"/>
            </prepare>
            <streaming>
            	<!-- Here, we give the relative path to the script and pass it
            	the parameters of the workflow node. The script is held
            	in a directory having the same name as the workflow node.
            	
            	The parameters should be passed as **named** arguments. This
            	convention of passing them as named arguments makes the code
            	more readable/maintainable.
            	 -->
                <mapper>scripts/python_cloner2/cloner.py --copies 3</mapper>
            </streaming>
            <configuration>
            	<!-- # Standard settings for our framework -->
                <property>
                    <name>mapred.output.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONOutputFormat</value>
                </property>
                <property>
                    <name>mapred.input.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONInputFormat</value>
                </property>
                <!-- # Custom settings for this workflow node -->
                <!-- We do not use any reducers, so we set their number to 0 -->
                <property>
                    <name>mapreduce.job.reduces</name>
                    <value>0</value>
                </property>
                <property>
                    <name>mapreduce.input.fileinputformat.inputdir</name>
                    <value>${input_person}</value>
                </property>
				<property>
				    <name>input.schema.literal</name>
				    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.core.examples.schemas.documentandauthor.Person']}</value>
				</property>
                <property>
                    <name>mapreduce.output.fileoutputformat.outputdir</name>
                    <value>${output_person}</value>
                </property>
				<property>
				    <name>output.schema.literal</name>
				    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.core.examples.schemas.documentandauthor.Person']}</value>
				</property>
            </configuration>
        </map-reduce>
        <ok to="end"/>
        <error to="fail"/>
    </action>
    <kill name="fail">
        <message>Unfortunately, the process failed -- error message: [${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>

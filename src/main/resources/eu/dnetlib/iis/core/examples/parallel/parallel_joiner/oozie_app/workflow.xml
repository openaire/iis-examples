<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-core_examples_parallel_parallel_joiner">

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
    <start to="forking_subworkflow"/>

   <!-- STEP 1 - FORKING SUBWORKFLOW -->
    <action name="forking_subworkflow">
        <sub-workflow>
            <app-path>${wf:appPath()}/forking_subworkflow</app-path>
            <configuration>
                <property>
                    <name>jobTracker</name>
                    <value>${jobTracker}</value>
                </property>
                <property>
                    <name>nameNode</name>
                    <value>${nameNode}</value>
                </property>
                <property>
                    <name>queueName</name>
                    <value>${queueName}</value>
                </property>
                <property>
                    <name>oozieLauncherQueueName</name>
                    <value>${oozieLauncherQueueName}</value>
                </property>
                <!-- Working directory of the subworkflow -->
                <property>
                    <name>workingDir</name>
                    <value>${workingDir}/forking_subworkflow/working_dir</value>
                </property>
                <!-- output port "person" bound to given path -->
                <property>
                    <name>output_person</name>
                    <value>${workingDir}/forking_subworkflow/output_person/</value>
                </property>
                <!-- output port "document" bound to given path -->
                <property>
                    <name>output_document</name>
                    <value>${workingDir}/forking_subworkflow/output_document/</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="document_person_joiner"/>
        <error to="fail"/>
    </action>
    <!-- STEP 1 -->
    
    <!-- STEP 2 - JOIN DOCUMENT AND PERSON -->
    <action name="document_person_joiner">
        <java>
            <!-- The data generated by this node is deleted in this section -->
            <prepare>
                <delete path="${nameNode}${workingDir}/joiner" />
                <mkdir path="${nameNode}${workingDir}/joiner" />
            </prepare> 
            <!-- This is simple wrapper for the Java code -->
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <!-- The business Java code that gets to be executed -->
            <arg>eu.dnetlib.iis.core.examples.java.Joiner</arg>
            <!-- All input and output ports have to be bound to paths in 
            HDFS, working directory has to be specified as well -->
            <arg>-Iperson=${workingDir}/forking_subworkflow/output_person</arg>
            <arg>-Idocument=${workingDir}/forking_subworkflow/output_document</arg>
            <arg>-Odocument_with_authors=${workingDir}/joiner/output_document_with_authors</arg>
            <arg>-Operson_with_documents=${workingDir}/joiner/output_person_with_documents</arg>
            <arg>-Operson_age=${workingDir}/joiner/output_person_age</arg>
        </java>
        <ok to="end"/>
        <error to="fail"/>
    </action>
    <!-- STEP 2 -->
    
    <kill name="fail">
        <message>Unfortunately, the process failed -- error message: [${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    
    
    <end name="end"/>
</workflow-app>

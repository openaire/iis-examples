<?xml version="1.0"?>
<!-- Note that documentation placed in comments in this file uses the 
"markdown" syntax (along with its way of dividing text into sections). -->
<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-core_examples_hadoopstreaming_cloner_without_reducer_with_subworkflow">

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapred.job.queue.name</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
	<start to="generate-schema" />

	<action name="generate-schema">
	    <java>
	        <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
	        <arg>eu.dnetlib.iis.core.examples.schemas.documentandauthor.Person</arg>
	        <capture-output />
	    </java>
	    <ok to="data_producer" />
	    <error to="fail" />
	</action>
	
	<action name="data_producer">
		<java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/data_producer" />
				<mkdir path="${nameNode}${workingDir}/data_producer" />
			</prepare>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.core.examples.java.SampleDataProducer</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Operson=${workingDir}/data_producer/person</arg>
			<arg>-Odocument=${workingDir}/data_producer/document</arg>
		</java>
		<ok to="python_cloner" />
		<error to="fail" />
	</action>
    <action name="python_cloner">
        <map-reduce>
            <prepare>
                <delete path="${nameNode}${workingDir}/python_cloner"/>
                <mkdir path="${nameNode}${workingDir}/python_cloner"/>
            </prepare>
            <streaming>
            	<!-- Here, we give the relative path to the script and pass it
            	the parameters of the workflow node. The script is held
            	in a directory having the same name as the workflow node.
            	
            	The parameters should be passed as **named** arguments. This
            	convention of passing them as named arguments makes the code
            	more readable/maintainable.
            	 -->
                <mapper>scripts/python_cloner/cloner.py --copies 2</mapper>
            </streaming>
            <configuration>
            	<!-- # Standard settings for our framework -->
                <property>
                    <name>mapred.output.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONOutputFormat</value>
                </property>
                <property>
                    <name>mapred.input.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONInputFormat</value>
                </property>
                <!-- # Custom settings for this workflow node -->
                 <!-- We do not use any reducers, so we set their number to 0 -->
                <property>
                    <name>mapred.reduce.tasks</name>
                    <value>0</value>
                </property>
                <property>
                    <name>mapred.input.dir</name>
                    <value>${workingDir}/data_producer/person</value>
                </property>
				<property>
				    <name>input.schema.literal</name>
				    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.core.examples.schemas.documentandauthor.Person']}</value>
				</property>
                <property>
                    <name>mapred.output.dir</name>
                    <value>${workingDir}/python_cloner/output</value>
                </property>
				<property>
				    <name>output.schema.literal</name>
				    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.core.examples.schemas.documentandauthor.Person']}</value>
				</property>
            </configuration>
        </map-reduce>
        <ok to="my_subworkflow"/>
        <error to="fail"/>
    </action>
    <action name="my_subworkflow">
        <sub-workflow>
            <app-path>${wf:appPath()}/my_subworkflow</app-path>
            <configuration>
                <property>
                    <name>jobTracker</name>
                    <value>${jobTracker}</value>
                </property>
                <property>
                    <name>nameNode</name>
                    <value>${nameNode}</value>
                </property>
                <property>
                    <name>queueName</name>
                    <value>${queueName}</value>
                </property>
                <property>
                    <name>oozieLauncherQueueName</name>
                    <value>${oozieLauncherQueueName}</value>
                </property>
                <!-- Working directory of the subworkflow -->
                <property>
                    <name>workingDir</name>
                    <value>${workingDir}/my_subworkflow/working_dir</value>
                </property>
                <!-- Input port "person" bound to given path -->
                <property>
                    <name>input_person</name>
                    <value>${workingDir}/python_cloner/output</value>
                </property>
                <!-- Output port "person" bound to given path -->
                <property>
                    <name>output_person</name>
                    <value>${workingDir}/my_subworkflow/person</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="end"/>
        <error to="fail"/>
    </action>
    <kill name="fail">
        <message>Unfortunately, the process failed -- error message:
        			[${wf:errorMessage(wf:lastErrorNode())}]
        		</message>
    </kill>
    <end name="end"/>
</workflow-app>



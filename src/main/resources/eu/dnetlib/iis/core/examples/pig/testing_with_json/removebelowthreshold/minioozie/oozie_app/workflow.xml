<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-removebelowthreshold">
    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapred.job.queue.name</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
            <property>
                <name>queueName</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozieLauncherQueueName</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
            <property>
                <name>nameNode</name>
                <value>${nameNode}</value>
            </property>
            <property>
                <name>jobTracker</name>
                <value>${jobTracker}</value>
            </property>
        </configuration>
    </global>

    <start to="producer"/>
    <action name="producer">
        <java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/producer" />
				<mkdir path="${nameNode}${workingDir}/producer" />
			</prepare>
            <!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
			<arg>-C{input_from_project_reference_extraction,
                eu.dnetlib.iis.referenceextraction.project.schemas.DocumentToProject,
				eu/dnetlib/iis/core/examples/pig/testing_with_json/removebelowthreshold/data/input_from_project_reference_extraction.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
            <arg>-Oinput_from_project_reference_extraction=${workingDir}/producer/input_from_project_reference_extraction</arg>
        </java>
        <ok to="removebelowthreshold"/>
        <error to="fail"/>
    </action>
    <action name="removebelowthreshold">
        <sub-workflow>
            <app-path>${wf:appPath()}/removebelowthreshold</app-path>
            <configuration>
                <!-- Working directory of the subworkflow -->
                <property>
                    <name>workingDir</name>
                    <value>${workingDir}/removebelowthreshold/working_dir</value>
                </property>

                <!-- Input datastores: -->
                <property>
                    <name>input_from_project_reference_extraction</name>
                    <value>${workingDir}/producer/input_from_project_reference_extraction</value>
                </property>
                <!-- Input parameters: -->
                <property>
                    <name>threshold</name>
                    <value>1.5</value>
                </property>
                <!-- Output datastores: -->
                <property>
                    <name>output</name>
                    <value>${workingDir}/removebelowthreshold/output</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="consumer"/>
        <error to="fail"/>
    </action>
    <action name="consumer">
		<java>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- Specification of the input ports -->
			<arg>-C{output,
				eu.dnetlib.iis.importer.schemas.DocumentToProject,
				eu/dnetlib/iis/core/examples/pig/testing_with_json/removebelowthreshold/data/output.json}</arg>
    		<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Ioutput=${workingDir}/removebelowthreshold/output</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>
    <kill name="fail">
		<message>Unfortunately, the workflow failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>


<?xml version="1.0"?>
<!-- Note that documentation placed in comments in this file uses the
"markdown" syntax (along with its way of dividing text into sections). -->
<workflow-app xmlns="uri:oozie:workflow:0.3" name="test-core_examples_hadoopstreaming_cloner_with_unicode_escape_codes">
	<start to="generate-schema" />

	<action name="generate-schema">
	    <java>
    		<job-tracker>${jobTracker}</job-tracker>
        	<name-node>${nameNode}</name-node>
	        <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
	        <arg>eu.dnetlib.iis.core.examples.schemas.documenttext.DocumentText</arg>
	        <capture-output />
	    </java>
	    <ok to="data_producer" />
	    <error to="fail" />
	</action>

	<action name="data_producer">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/data_producer" />
				<mkdir path="${nameNode}${workingDir}/data_producer" />
			</prepare>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
			</configuration>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
			<arg>-C{document, 
				eu.dnetlib.iis.core.examples.schemas.documenttext.DocumentText,
				eu/dnetlib/iis/core/examples/hadoopstreaming/cloner_with_unicode_escape_codes/producer_data/documents.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Odocument=${workingDir}/data_producer/document_text</arg>
		</java>
		<ok to="python_cloner" />
		<error to="fail" />
	</action>

    <action name="python_cloner">
        <map-reduce>
            <job-tracker>${jobTracker}</job-tracker>
            <name-node>${nameNode}</name-node>
            <prepare>
                <delete path="${nameNode}${workingDir}/python_cloner"/>
                <mkdir path="${nameNode}${workingDir}/python_cloner"/>
            </prepare>
            <streaming>
            	<!-- Here, we give the relative path to the script and pass it
            	the parameters of the workflow node. The script is held
            	in a directory having the same name as the workflow node.

            	The parameters should be passed as **named** arguments. This
            	convention of passing them as named arguments makes the code
            	more readable/maintainable.
            	 -->
                <mapper>scripts/python_cloner/cloner.py</mapper>
            </streaming>
            <configuration>
            	<!-- # Standard settings for our framework -->
                <property>
                    <name>mapred.output.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONOutputFormat</value>
                </property>
                <property>
                    <name>mapred.input.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONInputFormat</value>
                </property>
                <!-- TODELETE -->
                <!-- <property>
                    <name>mapred.input.format.class</name>
                    <value>org.apache.avro.mapred.AvroAsTextInputFormat</value>
                </property>-->
                
                <!-- # Custom settings for this workflow node -->
                <!-- We do not use any reducers, so we set their number to 0 -->
                <property>
                    <name>mapred.reduce.tasks</name>
                    <value>0</value>
                </property>
                
                <!-- INPUT -->
                <property>
                    <name>mapred.input.dir</name>
                    <value>${workingDir}/data_producer/document_text</value>
                </property>

				<property>
				    <name>input.schema.literal</name>
				    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.core.examples.schemas.documenttext.DocumentText']}</value>
				</property>

				<!-- OUTPUT -->
                <property>
                    <name>mapred.output.dir</name>
                    <value>${workingDir}/python_cloner/document_text</value>
                </property>          

				<property>
				    <name>output.schema.literal</name>
				    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.core.examples.schemas.documenttext.DocumentText']}</value>
				</property>

            </configuration>
        </map-reduce>
        <ok to="end"/>
        <error to="fail"/>
    </action>

    <kill name="fail">
        <message>Unfortunately, the process failed -- error message:
        			[${wf:errorMessage(wf:lastErrorNode())}]
        		</message>
    </kill>

    <end name="end"/>
</workflow-app>

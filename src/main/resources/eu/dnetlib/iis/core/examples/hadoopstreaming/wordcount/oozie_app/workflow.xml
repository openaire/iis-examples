<?xml version="1.0"?>
<!-- Note that documentation placed in comments in this file uses the 
"markdown" syntax (along with its way of dividing text into sections). -->
<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-core_examples_hadoopstreaming_wordcount">
	
    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapred.job.queue.name</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
	<start to="generate-schema" />

	<action name="generate-schema">
	    <java>
	        <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
	        <arg>eu.dnetlib.iis.core.examples.schemas.documentandauthor.Document</arg>
	        <arg>eu.dnetlib.iis.core.examples.schemas.WordCount</arg>
	        <capture-output />
	    </java>
	    <ok to="producer" />
	    <error to="fail" />
	</action>
	
	<action name="producer">
		<java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/producer" />
				<mkdir path="${nameNode}${workingDir}/producer" />
			</prepare>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
			<arg>-C{document, 
				eu.dnetlib.iis.core.examples.schemas.documentandauthor.Document,
				eu/dnetlib/iis/core/examples/data/document.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Odocument=${workingDir}/producer/document</arg>
		</java>
		<ok to="title_wordcount" />
		<error to="fail" />
	</action>
    <action name="title_wordcount">
        <map-reduce>
            <prepare>
                <delete path="${nameNode}${workingDir}/title_wordcount"/>
                <mkdir path="${nameNode}${workingDir}/title_wordcount"/>
            </prepare>
            <streaming>
            	<!-- Here, we give the relative path to the script and pass it
            	the parameters of the workflow node. The script is held
            	in a directory having the same name as the workflow node.
            	
            	The parameters should be passed as **named** arguments. This
            	convention of passing them as named arguments makes the code
            	more readable/maintainable.
            	 -->
                <mapper>scripts/title_wordcount/mapper.py</mapper>
                <reducer>scripts/title_wordcount/reducer.py</reducer>
            </streaming>
            <configuration>
            	<!-- # Standard settings for our framework -->
                <property>
                    <name>mapred.output.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONOutputFormat</value>
                </property>
                <property>
                    <name>mapred.input.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONInputFormat</value>
                </property>
                <!-- # Custom settings for this workflow node -->
                <property>
                    <name>mapred.input.dir</name>
                    <value>${workingDir}/producer/document</value>
                </property>
                <property>
				    <name>input.schema.literal</name>
				    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.core.examples.schemas.documentandauthor.Document']}</value>
				</property>
                <property>
                    <name>mapred.output.dir</name>
                    <value>${workingDir}/title_wordcount/wordcount</value>
                </property>
				<property>
				    <name>output.schema.literal</name>
				    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.core.examples.schemas.WordCount']}</value>
				</property>
            </configuration>
        </map-reduce>
        <ok to="consumer"/>
        <error to="fail"/>
    </action>
    <action name="consumer">
		<java>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- Specification of the input ports -->
			<arg>-C{wordcount, 
				eu.dnetlib.iis.core.examples.schemas.WordCount,
				eu/dnetlib/iis/core/examples/data/wordcount_lowercase.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Iwordcount=${workingDir}/title_wordcount/wordcount</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>
    <kill name="fail">
        <message>Unfortunately, the process failed -- error message:
        			[${wf:errorMessage(wf:lastErrorNode())}]
        		</message>
    </kill>
    <end name="end"/>
</workflow-app>



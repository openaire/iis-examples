<workflow-app xmlns="uri:oozie:workflow:0.4" name="java-joiner">

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
    <start to="data_producer"/>
    <action name="data_producer">
        <java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/data_producer" />
				<mkdir path="${nameNode}${workingDir}/data_producer" />
			</prepare>
            <!-- This is simple wrapper for the Java code -->
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <!-- The business Java code that gets to be executed -->
            <arg>eu.dnetlib.iis.core.examples.java.SampleDataProducer</arg>
            <!-- All input and output ports have to be bound to paths in 
            HDFS, working directory has to be specified as well -->
            <arg>-Operson=${workingDir}/data_producer/person</arg>
            <arg>-Odocument=${workingDir}/data_producer/document</arg>
        </java>
        <ok to="joiner"/>
        <error to="fail"/>
    </action>
    <action name="joiner">
        <java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/joiner" />
				<mkdir path="${nameNode}${workingDir}/joiner" />
			</prepare>
            <!-- This is simple wrapper for the Java code -->
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <!-- The business Java code that gets to be executed -->
            <arg>eu.dnetlib.iis.core.examples.java.Joiner</arg>
            <!-- All input and output ports have to be bound to paths in 
            HDFS, working directory has to be specified as well -->
            <arg>-Iperson=${workingDir}/data_producer/person</arg>
            <arg>-Idocument=${workingDir}/data_producer/document</arg>
            <arg>-Odocument_with_authors=${workingDir}/joiner/document_with_authors</arg>
            <arg>-Operson_with_documents=${workingDir}/joiner/person_with_documents</arg>
            <arg>-Operson_age=${workingDir}/joiner/person_age</arg>
        </java>
        <ok to="end"/>
        <error to="fail"/>
    </action>
    <kill name="fail">
        <message>Unfortunately, the process failed -- error message: [${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>
